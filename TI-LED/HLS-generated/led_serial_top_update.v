// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module led_serial_top_update (
        ap_ready,
        this_nibblesq_12_read,
        start1,
        led_serial_sbox_ctlstate_constprop_i,
        led_serial_sbox_ctlstate_constprop_o,
        led_serial_sbox_ctlstate_constprop_o_ap_vld,
        led_serial_sbox_done_constprop,
        led_serial_sbox_done_constprop_ap_vld,
        ap_return
);


output   ap_ready;
input  [11:0] this_nibblesq_12_read;
input  [0:0] start1;
input  [3:0] led_serial_sbox_ctlstate_constprop_i;
output  [3:0] led_serial_sbox_ctlstate_constprop_o;
output   led_serial_sbox_ctlstate_constprop_o_ap_vld;
output  [0:0] led_serial_sbox_done_constprop;
output   led_serial_sbox_done_constprop_ap_vld;
output  [11:0] ap_return;

reg[0:0] led_serial_sbox_done_constprop;
reg led_serial_sbox_done_constprop_ap_vld;

reg   [3:0] ap_phi_mux_ctlstate_next_V_1_phi_fu_47_p10;
wire   [3:0] ctlstate_next_V_load_fu_81_p1;
wire   [3:0] zext_ln214_fu_111_p1;
reg   [11:0] ap_phi_mux_nibblesq_12_next_V_1_phi_fu_65_p10;
wire   [11:0] p_Result_s_fu_92_p8;
wire    ap_ce_reg;

always @ (*) begin
    if ((~(ctlstate_next_V_load_fu_81_p1 == 4'd0) & ~(ctlstate_next_V_load_fu_81_p1 == 4'd1) & ~(ctlstate_next_V_load_fu_81_p1 == 4'd2) & ~(ctlstate_next_V_load_fu_81_p1 == 4'd3))) begin
        ap_phi_mux_ctlstate_next_V_1_phi_fu_47_p10 = led_serial_sbox_ctlstate_constprop_i;
    end else if ((ctlstate_next_V_load_fu_81_p1 == 4'd0)) begin
        ap_phi_mux_ctlstate_next_V_1_phi_fu_47_p10 = zext_ln214_fu_111_p1;
    end else if ((ctlstate_next_V_load_fu_81_p1 == 4'd1)) begin
        ap_phi_mux_ctlstate_next_V_1_phi_fu_47_p10 = 4'd2;
    end else if ((ctlstate_next_V_load_fu_81_p1 == 4'd2)) begin
        ap_phi_mux_ctlstate_next_V_1_phi_fu_47_p10 = 4'd3;
    end else if ((ctlstate_next_V_load_fu_81_p1 == 4'd3)) begin
        ap_phi_mux_ctlstate_next_V_1_phi_fu_47_p10 = 4'd0;
    end else begin
        ap_phi_mux_ctlstate_next_V_1_phi_fu_47_p10 = 'bx;
    end
end

always @ (*) begin
    if ((ctlstate_next_V_load_fu_81_p1 == 4'd2)) begin
        ap_phi_mux_nibblesq_12_next_V_1_phi_fu_65_p10 = p_Result_s_fu_92_p8;
    end else if (((ctlstate_next_V_load_fu_81_p1 == 4'd1) | (ctlstate_next_V_load_fu_81_p1 == 4'd3) | (ctlstate_next_V_load_fu_81_p1 == 4'd0) | (~(ctlstate_next_V_load_fu_81_p1 == 4'd0) & ~(ctlstate_next_V_load_fu_81_p1 == 4'd1) & ~(ctlstate_next_V_load_fu_81_p1 == 4'd2) & ~(ctlstate_next_V_load_fu_81_p1 == 4'd3)))) begin
        ap_phi_mux_nibblesq_12_next_V_1_phi_fu_65_p10 = this_nibblesq_12_read;
    end else begin
        ap_phi_mux_nibblesq_12_next_V_1_phi_fu_65_p10 = 'bx;
    end
end

always @ (*) begin
    if ((ctlstate_next_V_load_fu_81_p1 == 4'd0)) begin
        led_serial_sbox_done_constprop = 1'd0;
    end else if ((ctlstate_next_V_load_fu_81_p1 == 4'd3)) begin
        led_serial_sbox_done_constprop = 1'd1;
    end else begin
        led_serial_sbox_done_constprop = 'bx;
    end
end

always @ (*) begin
    if (((ctlstate_next_V_load_fu_81_p1 == 4'd3) | (ctlstate_next_V_load_fu_81_p1 == 4'd0))) begin
        led_serial_sbox_done_constprop_ap_vld = 1'b1;
    end else begin
        led_serial_sbox_done_constprop_ap_vld = 1'b0;
    end
end

assign ap_ready = 1'b1;

assign p_Result_s_fu_92_p8 = {{{{{{{{{{{{1'd0}, {3'd0}}}, {1'd0}}}, {1'd0}}}, {2'd0}}}, {1'd0}}}, {3'd0}};

assign zext_ln214_fu_111_p1 = start1;

assign ap_return = ap_phi_mux_nibblesq_12_next_V_1_phi_fu_65_p10;

assign ctlstate_next_V_load_fu_81_p1 = led_serial_sbox_ctlstate_constprop_i;

assign led_serial_sbox_ctlstate_constprop_o = ap_phi_mux_ctlstate_next_V_1_phi_fu_47_p10;

assign led_serial_sbox_ctlstate_constprop_o_ap_vld = 1'b1;

endmodule //led_serial_top_update
