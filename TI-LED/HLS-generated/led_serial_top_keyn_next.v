// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module led_serial_top_keyn_next (
        ap_ready,
        key_next_read,
        value_r,
        i,
        j,
        k,
        ap_return
);


output   ap_ready;
input  [127:0] key_next_read;
input  [3:0] value_r;
input  [0:0] i;
input  [1:0] j;
input  [1:0] k;
output  [127:0] ap_return;

wire   [3:0] shl_ln_fu_68_p3;
wire   [4:0] shl_ln774_1_fu_80_p3;
wire   [4:0] xor_ln774_fu_88_p2;
wire   [4:0] zext_ln774_fu_76_p1;
wire   [4:0] sub_ln774_fu_94_p2;
wire   [4:0] k_cast_fu_64_p1;
wire   [4:0] sub_ln774_1_fu_100_p2;
wire   [6:0] shl_ln774_2_fu_106_p3;
wire   [127:0] zext_ln368_fu_114_p1;
wire   [127:0] shl_ln368_fu_118_p2;
wire   [127:0] xor_ln368_fu_124_p2;
wire   [127:0] zext_ln368_4_fu_136_p1;
wire   [127:0] and_ln368_fu_130_p2;
wire   [127:0] shl_ln368_4_fu_140_p2;

assign and_ln368_fu_130_p2 = (xor_ln368_fu_124_p2 & key_next_read);

assign ap_ready = 1'b1;

assign k_cast_fu_64_p1 = k;

assign shl_ln368_4_fu_140_p2 = zext_ln368_4_fu_136_p1 << zext_ln368_fu_114_p1;

assign shl_ln368_fu_118_p2 = 128'd15 << zext_ln368_fu_114_p1;

assign shl_ln774_1_fu_80_p3 = {{i}, {4'd0}};

assign shl_ln774_2_fu_106_p3 = {{sub_ln774_1_fu_100_p2}, {2'd0}};

assign shl_ln_fu_68_p3 = {{j}, {2'd0}};

assign sub_ln774_1_fu_100_p2 = (sub_ln774_fu_94_p2 - k_cast_fu_64_p1);

assign sub_ln774_fu_94_p2 = (xor_ln774_fu_88_p2 - zext_ln774_fu_76_p1);

assign xor_ln368_fu_124_p2 = (shl_ln368_fu_118_p2 ^ 128'd340282366920938463463374607431768211455);

assign xor_ln774_fu_88_p2 = (shl_ln774_1_fu_80_p3 ^ 5'd31);

assign zext_ln368_4_fu_136_p1 = value_r;

assign zext_ln368_fu_114_p1 = shl_ln774_2_fu_106_p3;

assign zext_ln774_fu_76_p1 = shl_ln_fu_68_p3;

assign ap_return = (shl_ln368_4_fu_140_p2 | and_ln368_fu_130_p2);

endmodule //led_serial_top_keyn_next
