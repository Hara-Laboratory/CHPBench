 TI-LED, unlike the other four RTL designs that were being developed by same group of researchers, coding style and development practices are far different- for example, in TI-LED's RTL codes, the author uses a lot of "function", "`parameters", and "case()" syntax which were almost not used in the other four RTL designs. Although these coding practices do not make this design more difficult to translate, since these syntax all have their refering syntax in C++- function, "\#define", "switch(case)" . However, the cipher LED itself is more complex comparing to SIMON and SPECK which were categorized as ARX(add, rotation, XOR) ciphers, since LED is based on SPN, which is Substitution-Permutation Network, and harnesses a S-box structure. One more difference is that TI-LED does not need an extra top-level, or shall we say that it does not contain such kind of module that we can describe as a core module. Making it easier to compare to its HLS counter-part without the impact of top-level overhead.
 
 The design of TI-LED contains three finite-state-machines, with two of the FSMs implemented at top-level, which is the "led\_serial" module, and one FSM implemented in S-box module. At top-level, control-FSM operates at highest level, switching states from idle state all the way to done state. Control-FSM also calls S-box for substitutions and command-FSM for permutations. S-box FSM quickly run through its four states whenever it is called.
