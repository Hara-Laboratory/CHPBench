Being the first project that was brought to our study, it took long time and countless tries to learn and get familiar with Vitis-HLS, especially on how to perform specific coding practice for a algorithm, or program, to be able to run through Vitis-HLS; also being the first design that was finalized, this design also appears to be little bit immature, meaning that some better coding practices can be made considering following experience on future sets of designs.
Since the original RTL project contains all files from modules to top-level control module which hold for one-time input/output signals, translation from Verilog to C++ seemed straight forward. Although the original designer include all core modules- including the core, two shares of keySchedule module, two shares of datapath, inside one file. For better clarity of code, we chose to implement each module as one single .cpp file, and with a .hpp header file to describe the module. Since our goal is to implement the HLS design to be as similar to the original RTL as possible, we chose to implement each module as a C++ class, describing IO and permanent registers (as variables in C++) of each class in their .hpp header file, defining behavioral logic and declaring temporary variables in .cpp source file. 
