// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="top_top,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu11p-flga2577-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.971143,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=68,HLS_SYN_LUT=282,HLS_VERSION=2022_2}" *)

module top (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        vrst,
        rst_r,
        clk,
        rd,
        ap_return
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   vrst;
input   rst_r;
input   clk;
input   rd;
output  [7:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] out_tmp_V;
reg   [2:0] cnt_V;
reg   [31:0] tmp0_reg_V;
reg   [0:0] ap_phi_mux_out_tmp_V_flag_4_phi_fu_87_p8;
wire   [0:0] vrst_read_read_fu_78_p2;
wire   [0:0] rst_r_read_read_fu_72_p2;
wire   [0:0] or_ln53_fu_276_p2;
wire   [0:0] rd_read_read_fu_66_p2;
reg   [31:0] ap_phi_mux_out_tmp_V_new_4_phi_fu_103_p8;
wire   [31:0] r_V_4_fu_283_p3;
wire   [31:0] ret_V_fu_208_p2;
reg   [0:0] ap_phi_mux_cnt_V_flag_3_phi_fu_118_p8;
reg   [2:0] ap_phi_mux_cnt_V_new_3_phi_fu_135_p8;
wire   [2:0] select_ln50_fu_247_p3;
wire   [0:0] icmp_ln1019_1_fu_235_p2;
wire   [31:0] r_V_5_fu_170_p2;
wire   [31:0] ret_V_3_fu_176_p2;
wire   [14:0] r_V_6_fu_182_p4;
wire   [31:0] zext_ln1669_fu_192_p1;
wire   [31:0] ret_V_4_fu_196_p2;
wire   [31:0] r_V_7_fu_202_p2;
wire   [2:0] add_ln186_fu_215_p2;
wire   [0:0] icmp_ln1019_fu_221_p2;
wire   [31:0] select_ln44_fu_227_p3;
wire   [23:0] r_V_fu_262_p4;
wire   [0:0] icmp_ln1027_fu_256_p2;
wire   [31:0] zext_ln1669_1_fu_272_p1;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_condition_51;
reg    ap_condition_55;
reg    ap_condition_84;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 out_tmp_V = 32'd0;
#0 cnt_V = 3'd0;
#0 tmp0_reg_V = 32'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((1'b1 == ap_condition_84)) begin
            tmp0_reg_V <= ret_V_fu_208_p2;
        end else if ((vrst_read_read_fu_78_p2 == 1'd0)) begin
            tmp0_reg_V <= 32'd2384504549;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (ap_phi_mux_cnt_V_flag_3_phi_fu_118_p8 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        cnt_V <= ap_phi_mux_cnt_V_new_3_phi_fu_135_p8;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (ap_phi_mux_out_tmp_V_flag_4_phi_fu_87_p8 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        out_tmp_V <= ap_phi_mux_out_tmp_V_new_4_phi_fu_103_p8;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((rd_read_read_fu_66_p2 == 1'd0) & (rst_r_read_read_fu_72_p2 == 1'd0) & (vrst_read_read_fu_78_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_cnt_V_flag_3_phi_fu_118_p8 = 1'd0;
    end else if ((((rd_read_read_fu_66_p2 == 1'd1) & (rst_r_read_read_fu_72_p2 == 1'd0) & (vrst_read_read_fu_78_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1)) | ((rst_r_read_read_fu_72_p2 == 1'd1) & (vrst_read_read_fu_78_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1)) | ((vrst_read_read_fu_78_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_phi_mux_cnt_V_flag_3_phi_fu_118_p8 = 1'd1;
    end else begin
        ap_phi_mux_cnt_V_flag_3_phi_fu_118_p8 = 'bx;
    end
end

always @ (*) begin
    if (((rd_read_read_fu_66_p2 == 1'd1) & (rst_r_read_read_fu_72_p2 == 1'd0) & (vrst_read_read_fu_78_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_cnt_V_new_3_phi_fu_135_p8 = select_ln50_fu_247_p3;
    end else if ((((rst_r_read_read_fu_72_p2 == 1'd1) & (vrst_read_read_fu_78_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1)) | ((vrst_read_read_fu_78_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_phi_mux_cnt_V_new_3_phi_fu_135_p8 = 3'd0;
    end else begin
        ap_phi_mux_cnt_V_new_3_phi_fu_135_p8 = 'bx;
    end
end

always @ (*) begin
    if (((rd_read_read_fu_66_p2 == 1'd1) & (rst_r_read_read_fu_72_p2 == 1'd0) & (vrst_read_read_fu_78_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_out_tmp_V_flag_4_phi_fu_87_p8 = or_ln53_fu_276_p2;
    end else if (((rst_r_read_read_fu_72_p2 == 1'd1) & (vrst_read_read_fu_78_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_out_tmp_V_flag_4_phi_fu_87_p8 = 1'd0;
    end else if ((((rd_read_read_fu_66_p2 == 1'd0) & (rst_r_read_read_fu_72_p2 == 1'd0) & (vrst_read_read_fu_78_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1)) | ((vrst_read_read_fu_78_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_phi_mux_out_tmp_V_flag_4_phi_fu_87_p8 = 1'd1;
    end else begin
        ap_phi_mux_out_tmp_V_flag_4_phi_fu_87_p8 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        if ((1'b1 == ap_condition_55)) begin
            ap_phi_mux_out_tmp_V_new_4_phi_fu_103_p8 = ret_V_fu_208_p2;
        end else if ((1'b1 == ap_condition_51)) begin
            ap_phi_mux_out_tmp_V_new_4_phi_fu_103_p8 = r_V_4_fu_283_p3;
        end else if ((vrst_read_read_fu_78_p2 == 1'd0)) begin
            ap_phi_mux_out_tmp_V_new_4_phi_fu_103_p8 = 32'd0;
        end else begin
            ap_phi_mux_out_tmp_V_new_4_phi_fu_103_p8 = 'bx;
        end
    end else begin
        ap_phi_mux_out_tmp_V_new_4_phi_fu_103_p8 = 'bx;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln186_fu_215_p2 = (cnt_V + 3'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_condition_51 = ((rd_read_read_fu_66_p2 == 1'd1) & (rst_r_read_read_fu_72_p2 == 1'd0) & (vrst_read_read_fu_78_p2 == 1'd1));
end

always @ (*) begin
    ap_condition_55 = ((rd_read_read_fu_66_p2 == 1'd0) & (rst_r_read_read_fu_72_p2 == 1'd0) & (vrst_read_read_fu_78_p2 == 1'd1));
end

always @ (*) begin
    ap_condition_84 = ((icmp_ln1019_1_fu_235_p2 == 1'd1) & (rd_read_read_fu_66_p2 == 1'd1) & (rst_r_read_read_fu_72_p2 == 1'd0) & (vrst_read_read_fu_78_p2 == 1'd1));
end

assign ap_return = out_tmp_V[7:0];

assign icmp_ln1019_1_fu_235_p2 = ((add_ln186_fu_215_p2 == 3'd2) ? 1'b1 : 1'b0);

assign icmp_ln1019_fu_221_p2 = ((add_ln186_fu_215_p2 == 3'd3) ? 1'b1 : 1'b0);

assign icmp_ln1027_fu_256_p2 = ((select_ln50_fu_247_p3 < 3'd3) ? 1'b1 : 1'b0);

assign or_ln53_fu_276_p2 = (icmp_ln1027_fu_256_p2 | icmp_ln1019_fu_221_p2);

assign r_V_4_fu_283_p3 = ((icmp_ln1027_fu_256_p2[0:0] == 1'b1) ? zext_ln1669_1_fu_272_p1 : ret_V_fu_208_p2);

assign r_V_5_fu_170_p2 = tmp0_reg_V << 32'd13;

assign r_V_6_fu_182_p4 = {{ret_V_3_fu_176_p2[31:17]}};

assign r_V_7_fu_202_p2 = ret_V_4_fu_196_p2 << 32'd5;

assign r_V_fu_262_p4 = {{select_ln44_fu_227_p3[31:8]}};

assign rd_read_read_fu_66_p2 = rd;

assign ret_V_3_fu_176_p2 = (tmp0_reg_V ^ r_V_5_fu_170_p2);

assign ret_V_4_fu_196_p2 = (zext_ln1669_fu_192_p1 ^ ret_V_3_fu_176_p2);

assign ret_V_fu_208_p2 = (ret_V_4_fu_196_p2 ^ r_V_7_fu_202_p2);

assign rst_r_read_read_fu_72_p2 = rst_r;

assign select_ln44_fu_227_p3 = ((icmp_ln1019_fu_221_p2[0:0] == 1'b1) ? ret_V_fu_208_p2 : out_tmp_V);

assign select_ln50_fu_247_p3 = ((icmp_ln1019_fu_221_p2[0:0] == 1'b1) ? 3'd0 : add_ln186_fu_215_p2);

assign vrst_read_read_fu_78_p2 = vrst;

assign zext_ln1669_1_fu_272_p1 = r_V_fu_262_p4;

assign zext_ln1669_fu_192_p1 = r_V_6_fu_182_p4;

endmodule //top
