// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="top_top,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg676-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.349000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=14,HLS_SYN_LUT=104,HLS_VERSION=2022_2}" *)

module top (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        t,
        ap_return
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [3:0] t;
output  [3:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] xor_ln22_fu_119_p2;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln1027_fu_108_p2;
wire   [0:0] xor_ln22_1_fu_125_p2;
wire   [0:0] xor_ln23_fu_131_p2;
wire   [0:0] xor_ln24_fu_137_p2;
reg   [0:0] t2_V_reg_56;
reg   [0:0] t1_V_reg_67;
reg   [0:0] rhs_V_reg_78;
reg   [0:0] lhs_V_reg_89;
reg   [3:0] i_fu_42;
wire   [3:0] i_2_fu_113_p2;
reg   [3:0] o_V_fu_46;
wire   [3:0] p_Result_s_fu_143_p5;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_fu_42 <= 4'd0;
    end else if (((icmp_ln1027_fu_108_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_fu_42 <= i_2_fu_113_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1027_fu_108_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        lhs_V_reg_89 <= xor_ln22_fu_119_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        lhs_V_reg_89 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1027_fu_108_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        rhs_V_reg_78 <= xor_ln24_fu_137_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        rhs_V_reg_78 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1027_fu_108_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        t1_V_reg_67 <= xor_ln22_1_fu_125_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        t1_V_reg_67 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1027_fu_108_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        t2_V_reg_56 <= xor_ln23_fu_131_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        t2_V_reg_56 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1027_fu_108_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        o_V_fu_46 <= p_Result_s_fu_143_p5;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if (((icmp_ln1027_fu_108_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1027_fu_108_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln1027_fu_108_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_return = o_V_fu_46;

assign i_2_fu_113_p2 = (i_fu_42 + 4'd1);

assign icmp_ln1027_fu_108_p2 = ((i_fu_42 == t) ? 1'b1 : 1'b0);

assign p_Result_s_fu_143_p5 = {{{{xor_ln22_fu_119_p2}, {xor_ln24_fu_137_p2}}, {xor_ln23_fu_131_p2}}, {xor_ln22_1_fu_125_p2}};

assign xor_ln22_1_fu_125_p2 = (xor_ln22_fu_119_p2 ^ t1_V_reg_67);

assign xor_ln22_fu_119_p2 = (rhs_V_reg_78 ^ lhs_V_reg_89);

assign xor_ln23_fu_131_p2 = (t2_V_reg_56 ^ t1_V_reg_67);

assign xor_ln24_fu_137_p2 = (t2_V_reg_56 ^ rhs_V_reg_78);

endmodule //top
