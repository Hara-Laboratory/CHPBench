// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="top_top,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg676-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.421000,HLS_SYN_LAT=129,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=331,HLS_SYN_LUT=75,HLS_VERSION=2022_2}" *)

module top (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Din,
        ap_return
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [255:0] Din;
output  [63:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [255:0] p_Val2_s_fu_60;
wire   [255:0] p_Result_s_fu_131_p5;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln13_fu_109_p2;
reg   [7:0] count_fu_64;
wire   [7:0] count_3_fu_185_p2;
reg   [63:0] p_Val2_1_fu_68;
wire   [63:0] KS1_KX_V_fu_169_p3;
reg   [3:0] p_Val2_2_fu_72;
wire   [3:0] KS1_KY_V_fu_177_p3;
wire   [254:0] tmp2_fu_121_p4;
wire   [31:0] zext_ln13_fu_105_p1;
wire   [0:0] p_Result_1_fu_143_p3;
wire   [62:0] tmp_s_fu_151_p4;
wire   [0:0] p_Result_2_fu_161_p3;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        count_fu_64 <= 8'd1;
    end else if (((icmp_ln13_fu_109_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        count_fu_64 <= count_3_fu_185_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_Val2_1_fu_68 <= 64'd0;
    end else if (((icmp_ln13_fu_109_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        p_Val2_1_fu_68 <= KS1_KX_V_fu_169_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                p_Val2_2_fu_72[3] <= 1'b0;
    end else if (((icmp_ln13_fu_109_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                p_Val2_2_fu_72[3] <= KS1_KY_V_fu_177_p3[3];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_Val2_s_fu_60 <= Din;
    end else if (((icmp_ln13_fu_109_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        p_Val2_s_fu_60 <= p_Result_s_fu_131_p5;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if (((icmp_ln13_fu_109_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln13_fu_109_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln13_fu_109_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign KS1_KX_V_fu_169_p3 = {{p_Result_1_fu_143_p3}, {tmp_s_fu_151_p4}};

assign KS1_KY_V_fu_177_p3 = {{p_Result_2_fu_161_p3}, {3'd0}};

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_return = p_Val2_2_fu_72;

assign count_3_fu_185_p2 = (count_fu_64 + 8'd1);

assign icmp_ln13_fu_109_p2 = ((count_fu_64 == 8'd129) ? 1'b1 : 1'b0);

assign p_Result_1_fu_143_p3 = p_Result_s_fu_131_p5[zext_ln13_fu_105_p1];

assign p_Result_2_fu_161_p3 = p_Val2_1_fu_68[32'd1];

assign p_Result_s_fu_131_p5 = {{p_Val2_s_fu_60[255:255]}, {tmp2_fu_121_p4}};

assign tmp2_fu_121_p4 = {{p_Val2_s_fu_60[255:1]}};

assign tmp_s_fu_151_p4 = {{p_Val2_1_fu_68[63:1]}};

assign zext_ln13_fu_105_p1 = count_fu_64;

always @ (posedge ap_clk) begin
    p_Val2_2_fu_72[2:0] <= 3'b000;
end

endmodule //top
